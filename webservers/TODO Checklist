TODO
* << Jungle's pick
11.6 << DONE // TODO : doit이랑 같이 실행?
    A. Tiny 를 수정해서 모든 요청 라인과 요청 헤더를 echo하도록 하라.
    B. 여러분이 사용하는 브라우져를 사용해서 Tiny에 정적 컨텐츠를 요청해보라. Tiny로부터의 출력을 파일로 캡쳐하라.
    C. RFC 2616의 HTTP/1.1 표준을 참고해서 여러분의 사용하는 브라우저에서 보낼 HTTP 요청 각각의 헤더가 갖는 의미를 결정하라.
       RFC 2016은 www.rfc-editor.org/rfc.html에서 볼 수 있다.

11.7 << DONE
    Tiny를 확장해서 MPG 비디오 파일을 처리하도록 하시오. 실제 브라우저를 사용해서 여러분의 결과를 체크하시오.

11.8
    Tiny를 수정해서 명시적으로 CGI 자식들이 종료되는 것을 기다리는 대신에 SIGCHILD 핸들러 내에서 이들을 청소하도록 하시오.

11.9 << DONE
    Tiny를 수정해서 정적 컨텐츠를 처리할 때 요청한 파일을 mmap과 rio_readn대신에 malloc, rio_readn, rio_writen을 사용해서
    연결 식별자에게 복사하도록 하시오.

11.10 << DONE
    A. 그림 11.27의 CGI adder 함수에 대한 HTML 형식을 작성하시오.
       이 형식은 사용자가 함께 더할 두개의 숫자로 채우는 두개의 텍스틑 상자를 포함해야 한다.
       여러분의 형식은 GET 메소드를 사용해서 컨텐츠를 요청해야 한다.

    B. 실제 브라우져를 사용해서 Tiny로 부터 이 형식을 요청하고, 채운 형식을 Tiny에 보내고,
       adder가 생성한 동적 컨텐츠를 표시하는 방법으로 여러분의 작업을 체크하라.

11.11 << DONE
    Tiny를 확장해서 HTTP HEAD 메소드를 지원하도록 하라. TELNET을 웹클라이언트로 사용해서 작업 결과를 체크하시오.

11.12 DONE
    Tiny를 확장해서 HTTP POST 메소드를 요청한 동적 컨텐츠가 처리되도록 하시오. 여러분의 프로그램을 웹 브라우저를 이용해서 검증하시오.

11.13
    Tiny를 수정해서 write 함수가 불완전하게 닫힌 연결에 쓰려고 할 때 발생하는 SIGPIPE 시그널과
    EPIPE 에러를 깨끗하게(종료하지 않고) 처리하도록 하시오.

PROXY